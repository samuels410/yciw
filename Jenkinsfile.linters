#!/usr/bin/env groovy

/*
 * Copyright (C) 2019 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

def getImageTagVersion() {
  def flags = load 'build/new-jenkins/groovy/commit-flags.groovy'
  return flags.getImageTagVersion()
}

pipeline {
  agent { label 'canvas-docker' }
  options {
    ansiColor('xterm')
  }

  environment {
    COMPOSE_FILE = 'docker-compose.new-jenkins-web.yml'
    GERRIT_PROJECT = 'canvas-lms'
    GERRIT_PORT = '29418'
    GERRIT_URL = "$GERRIT_HOST:$GERRIT_PORT"

    NAME = getImageTagVersion()
    PATCHSET_TAG = "$DOCKER_REGISTRY_FQDN/jenkins/canvas-lms:$NAME"
  }
  stages {
    stage('Print Env Variables') {
      steps {
        timeout(time: 20, unit: 'SECONDS') {
          sh 'printenv | sort'
        }
      }
    }

    stage ('Pre-Cleanup') {
      steps {
        timeout(time: 2) {
          sh 'build/new-jenkins/docker-cleanup.sh'
        }
      }
    }

    stage('Gergich Setup') {
      steps {
        timeout(time: 3) {
          script {
            sh 'docker pull $PATCHSET_TAG'
          }
        }
      }
    }

    stage('Linters') {
      steps {
        sh 'build/new-jenkins/linters/run-gergich.sh'
      }
    }

    stage('Master Bouncer') {
      steps {
        sh 'build/new-jenkins/linters/run-master-bouncer.sh'
      }
    }

    // until we can update gergich to allow us to separate the linters,
    // these will be commented out
    // stage('rlint') {
    //   steps {
    //     sh 'build/new-jenkins/linters/run-rlint.sh'
    //   }
    // }
    // stage('brakeman') {
    //   steps {
    //     sh 'build/new-jenkins/linters/run-brakeman.sh'
    //   }
    // }
    // stage('commit message') {
    //   steps {
    //     sh 'build/new-jenkins/linters/run-commit-message.sh'
    //   }
    // }
    // stage('tatl tael') {
    //   steps {
    //     sh 'build/new-jenkins/linters/run-tatl-tael.sh'
    //   }
    // }
    // stage('ESLint - JSX') {
    //   steps {
    //     sh 'build/new-jenkins/linters/run-eslint.sh'
    //   }
    // }
    // stage('Stylelint') {
    //   steps {
    //     sh 'build/new-jenkins/linters/run-stylelint.sh'
    //   }
    // }
    // stage('XSSLint') {
    //   steps {
    //     sh 'build/new-jenkins/linters/run-xss.sh'
    //   }
    // }
  }

  post {
    cleanup {
      sh 'build/new-jenkins/docker-cleanup.sh --allow-failure'
    }
  }
}
