// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders the item to update if provided 1`] = `
<div>
  <View
    as="div"
    display="auto"
    padding="large medium medium"
  >
    <FormFieldGroup
      as="fieldset"
      colSpacing="small"
      description={
        <ScreenReaderContent
          as="span"
        >
          <h2>
            Edit Planner Item
          </h2>
        </ScreenReaderContent>
      }
      disabled={false}
      rowSpacing="small"
      vAlign="middle"
    >
      <TextInput
        disabled={false}
        inline={false}
        inputRef={[Function]}
        label="Title"
        layout="stacked"
        messages={Array []}
        onChange={[Function]}
        readOnly={false}
        size="medium"
        textAlign="start"
        type="text"
        value="Planner Item"
      />
      <DateTimeInput
        dateLabel="Date"
        dateNextLabel="Next Month"
        datePreviousLabel="Previous Month"
        description={
          <ScreenReaderContent
            as="span"
          >
            The date and time this to do is due
          </ScreenReaderContent>
        }
        disabled={false}
        invalidDateTimeMessage={[Function]}
        layout="stacked"
        locale="en"
        messageFormat="LLL"
        messages={Array []}
        onChange={[Function]}
        readOnly={false}
        required={true}
        timeLabel="Time"
        timeStep={30}
        timezone="Asia/Tokyo"
        value="2017-04-25T08:49:00.000Z"
      />
      <Select
        allowEmpty={true}
        closeOnSelect={true}
        constrain="scroll-parent"
        editable={false}
        emptyOption="---"
        filter={[Function]}
        formatSelectedOption={[Function]}
        id="to-do-item-course-select"
        inputRef={[Function]}
        label="Course"
        loadingText={null}
        onChange={[Function]}
        optionsMaxWidth={null}
        selectedOption={
          Object {
            "label": "a course",
            "value": "1",
          }
        }
        size="medium"
        visibleOptionsCount={8}
      >
        <option
          value="none"
        >
          Optional: Add Course
        </option>
        <option
          value="1"
        >
          a course
        </option>
      </Select>
      <TextArea
        autoGrow={false}
        disabled={false}
        height="10rem"
        inline={false}
        label="Details"
        layout="stacked"
        messages={Array []}
        onChange={[Function]}
        readOnly={false}
        resize="none"
        size="medium"
        textareaRef={[Function]}
        value="You made this item to remind you of something, but you forgot what."
      />
    </FormFieldGroup>
    <View
      as="div"
      display="auto"
      margin="small 0 0"
      textAlign="end"
    >
      <Button
        as="button"
        buttonRef={[Function]}
        cursor="pointer"
        fluidWidth={false}
        margin="0 x-small 0 0"
        onClick={[Function]}
        size="medium"
        type="button"
        variant="light"
      >
        Delete
      </Button>
      <Button
        as="button"
        buttonRef={[Function]}
        cursor="pointer"
        disabled={false}
        fluidWidth={false}
        margin="0 0 0 x-small"
        onClick={[Function]}
        size="medium"
        type="button"
        variant="primary"
      >
        Save
      </Button>
    </View>
  </View>
</div>
`;

exports[`updates state when new note is passed in 1`] = `
<div>
  <View
    as="div"
    display="auto"
    padding="large medium medium"
  >
    <FormFieldGroup
      as="fieldset"
      colSpacing="small"
      description={
        <ScreenReaderContent
          as="span"
        >
          <h2>
            Edit Planner Item 1
          </h2>
        </ScreenReaderContent>
      }
      disabled={false}
      rowSpacing="small"
      vAlign="middle"
    >
      <TextInput
        disabled={false}
        inline={false}
        inputRef={[Function]}
        label="Title"
        layout="stacked"
        messages={Array []}
        onChange={[Function]}
        readOnly={false}
        size="medium"
        textAlign="start"
        type="text"
        value="Planner Item 1"
      />
      <DateTimeInput
        dateLabel="Date"
        dateNextLabel="Next Month"
        datePreviousLabel="Previous Month"
        description={
          <ScreenReaderContent
            as="span"
          >
            The date and time this to do is due
          </ScreenReaderContent>
        }
        disabled={false}
        invalidDateTimeMessage={[Function]}
        layout="stacked"
        locale="en"
        messageFormat="LLL"
        messages={Array []}
        onChange={[Function]}
        readOnly={false}
        required={true}
        timeLabel="Time"
        timeStep={30}
        timezone="Asia/Tokyo"
        value="2017-04-28T11:00:00.000Z"
      />
      <Select
        allowEmpty={true}
        closeOnSelect={true}
        constrain="scroll-parent"
        editable={false}
        emptyOption="---"
        filter={[Function]}
        formatSelectedOption={[Function]}
        id="to-do-item-course-select"
        inputRef={[Function]}
        label="Course"
        loadingText={null}
        onChange={[Function]}
        optionsMaxWidth={null}
        selectedOption={
          Object {
            "label": "first course",
            "value": "1",
          }
        }
        size="medium"
        visibleOptionsCount={8}
      >
        <option
          value="none"
        >
          Optional: Add Course
        </option>
        <option
          value="1"
        >
          first course
        </option>
        <option
          value="2"
        >
          second course
        </option>
      </Select>
      <TextArea
        autoGrow={false}
        disabled={false}
        height="10rem"
        inline={false}
        label="Details"
        layout="stacked"
        messages={Array []}
        onChange={[Function]}
        readOnly={false}
        resize="none"
        size="medium"
        textareaRef={[Function]}
        value="You made this item to remind you of something, but you forgot what."
      />
    </FormFieldGroup>
    <View
      as="div"
      display="auto"
      margin="small 0 0"
      textAlign="end"
    >
      <Button
        as="button"
        buttonRef={[Function]}
        cursor="pointer"
        fluidWidth={false}
        margin="0 x-small 0 0"
        onClick={[Function]}
        size="medium"
        type="button"
        variant="light"
      >
        Delete
      </Button>
      <Button
        as="button"
        buttonRef={[Function]}
        cursor="pointer"
        disabled={false}
        fluidWidth={false}
        margin="0 0 0 x-small"
        onClick={[Function]}
        size="medium"
        type="button"
        variant="primary"
      >
        Save
      </Button>
    </View>
  </View>
</div>
`;

exports[`updates state when new note is passed in 2`] = `
<div>
  <View
    as="div"
    display="auto"
    padding="large medium medium"
  >
    <FormFieldGroup
      as="fieldset"
      colSpacing="small"
      description={
        <ScreenReaderContent
          as="span"
        >
          <h2>
            Edit Planner Item 2
          </h2>
        </ScreenReaderContent>
      }
      disabled={false}
      rowSpacing="small"
      vAlign="middle"
    >
      <TextInput
        disabled={false}
        inline={false}
        inputRef={[Function]}
        label="Title"
        layout="stacked"
        messages={Array []}
        onChange={[Function]}
        readOnly={false}
        size="medium"
        textAlign="start"
        type="text"
        value="Planner Item 2"
      />
      <DateTimeInput
        dateLabel="Date"
        dateNextLabel="Next Month"
        datePreviousLabel="Previous Month"
        description={
          <ScreenReaderContent
            as="span"
          >
            The date and time this to do is due
          </ScreenReaderContent>
        }
        disabled={false}
        invalidDateTimeMessage={[Function]}
        layout="stacked"
        locale="en"
        messageFormat="LLL"
        messages={Array []}
        onChange={[Function]}
        readOnly={false}
        required={true}
        timeLabel="Time"
        timeStep={30}
        timezone="Asia/Tokyo"
        value="2017-04-28T11:00:00.000Z"
      />
      <Select
        allowEmpty={true}
        closeOnSelect={true}
        constrain="scroll-parent"
        editable={false}
        emptyOption="---"
        filter={[Function]}
        formatSelectedOption={[Function]}
        id="to-do-item-course-select"
        inputRef={[Function]}
        label="Course"
        loadingText={null}
        onChange={[Function]}
        optionsMaxWidth={null}
        selectedOption={
          Object {
            "label": "second course",
            "value": "2",
          }
        }
        size="medium"
        visibleOptionsCount={8}
      >
        <option
          value="none"
        >
          Optional: Add Course
        </option>
        <option
          value="1"
        >
          first course
        </option>
        <option
          value="2"
        >
          second course
        </option>
      </Select>
      <TextArea
        autoGrow={false}
        disabled={false}
        height="10rem"
        inline={false}
        label="Details"
        layout="stacked"
        messages={Array []}
        onChange={[Function]}
        readOnly={false}
        resize="none"
        size="medium"
        textareaRef={[Function]}
        value="This is another reminder"
      />
    </FormFieldGroup>
    <View
      as="div"
      display="auto"
      margin="small 0 0"
      textAlign="end"
    >
      <Button
        as="button"
        buttonRef={[Function]}
        cursor="pointer"
        fluidWidth={false}
        margin="0 x-small 0 0"
        onClick={[Function]}
        size="medium"
        type="button"
        variant="light"
      >
        Delete
      </Button>
      <Button
        as="button"
        buttonRef={[Function]}
        cursor="pointer"
        disabled={false}
        fluidWidth={false}
        margin="0 0 0 x-small"
        onClick={[Function]}
        size="medium"
        type="button"
        variant="primary"
      >
        Save
      </Button>
    </View>
  </View>
</div>
`;
