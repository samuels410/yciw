#!/usr/bin/env groovy

/*
 * Copyright (C) 2019 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

pipeline {
  agent { label 'canvas-docker' }
  options {
    ansiColor('xterm')
    timestamps()
  }

  environment {
    COMPOSE_FILE = 'docker-compose.new-jenkins.yml'
    DOCKER_PROCESSES = '6'
    POSTGRES_PASSWORD = 'sekret'
    PACT_BROKER = credentials('PACT_BROKER')
    PACT_BROKER_USERNAME="${env.PACT_BROKER_USR}"
    PACT_BROKER_PASSWORD="${env.PACT_BROKER_PSW}"
  }

  stages {
    stage ('Pre-Cleanup') {
      steps {
        timeout(time: 2) {
          sh 'build/new-jenkins/docker-cleanup.sh'
        }
      }
    }

    stage('Start Docker Images') {
      steps {
        timeout(time: 10) {
          sh 'build/new-jenkins/docker-compose-pull.sh'
          sh 'build/new-jenkins/pact/docker-compose-pact-setup.sh'
        }
      }
    }

    stage('Provider Verification for API and Live Event Consumers') {
      parallel {
        stage ('Android') {
          environment {
            DATABASE_NAME = 'pact_test1'
            PACT_API_CONSUMER = 'android'
          }
          steps {
            timeout(time: 10) {
              sh 'build/new-jenkins/pact/contracts-verify-api.sh'
            }
          }
        }

        stage ('Canvas iOS') {
          environment {
            DATABASE_NAME = 'pact_test2'
            PACT_API_CONSUMER = 'canvas-ios'
          }
          steps {
            timeout(time: 10) {
              sh 'build/new-jenkins/pact/contracts-verify-api.sh'
            }
          }
        }

        stage ('Generic') {
          environment {
            DATABASE_NAME = 'pact_test3'
            PACT_API_CONSUMER = 'Generic Consumer'
          }
          steps {
            timeout(time: 10) {
              sh 'build/new-jenkins/pact/contracts-verify-api.sh'
            }
          }
        }

        stage ('Quiz LTI') {
          environment {
            DATABASE_NAME = 'pact_test4'
            PACT_API_CONSUMER = 'Quiz LTI'
          }
          steps {
            timeout(time: 10) {
              sh 'build/new-jenkins/pact/contracts-verify-api.sh'
            }
          }
        }

        stage ('Sistemic') {
          environment {
            DATABASE_NAME = 'pact_test5'
            PACT_API_CONSUMER = 'Sistemic'
          }
          steps {
            timeout(time: 10) {
              sh 'build/new-jenkins/pact/contracts-verify-api.sh'
            }
          }
        }

        stage("Live Events") {
          steps {
            timeout(time: 5) {
              sh 'build/new-jenkins/pact/contracts-verify-live-events.sh'
            }
          }
        }
      }
    }
  }

  post {
    failure {
      sh 'mkdir -vp spec_results'
      sh 'docker cp $(docker-compose ps -q canvas):/usr/src/app/log/spec_failures/. ./spec_results/'
      script {
        dir('spec_results') {
          htmlFiles = findFiles glob: '**/index.html'
        }

        publishHTML(target: [
          allowMissing: false,
          alwaysLinkToLastBuild: false,
          keepAll: true,
          reportDir: "spec_results",
          reportFiles: htmlFiles.join(','),
          reportName: 'Test Results'
        ])
      }
    }
    cleanup {
      sh 'rm -vrf spec_results/'
      sh 'build/new-jenkins/docker-cleanup.sh --allow-failure'
    }
  }
}
