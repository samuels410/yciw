#!/usr/bin/env groovy

/*
 * Copyright (C) 2019 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

library "canvas-builds-library"

def cleanupFn(status) {
  try {
    junit "tmp/spec_results/**/*.xml"

    if(status == 'FAILURE') {
      sh 'mkdir -vp spec_results'
      sh 'docker cp $(docker-compose ps -q canvas):/usr/src/app/log/spec_failures/. ./spec_results/'

      dir('spec_results') {
        htmlFiles = findFiles glob: '**/index.html'
      }

      publishHTML(target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: "spec_results",
        reportFiles: htmlFiles.join(','),
        reportName: 'Test Results'
      ])
    }
  } finally {
    sh 'rm -vrf spec_results/'
    execute 'bash/docker-cleanup.sh --allow-failure'
  }
}

pipeline {
  agent none
  options {
    ansiColor('xterm')
    timestamps()
  }

  environment {
    COMPOSE_FILE = 'docker-compose.new-jenkins.yml'
    DOCKER_PROCESSES = '6'
    POSTGRES_PASSWORD = 'sekret'
    PACT_BROKER = credentials('PACT_BROKER')
    PACT_BROKER_USERNAME="${env.PACT_BROKER_USR}"
    PACT_BROKER_PASSWORD="${env.PACT_BROKER_PSW}"
  }

  stages {
    stage('Environment') {
      steps {
        script {
          protectedNode('canvas-docker', { status -> cleanupFn(status) }) {
            stage ('Pre-Cleanup') {
              cleanAndSetup()
            }

            stage('Start Docker Images') {
              timeout(time: 10) {
                checkout scm
                sh 'build/new-jenkins/docker-compose-pull.sh'
                sh 'build/new-jenkins/pact/docker-compose-pact-setup.sh'
              }
            }

            stage('Provider Verification for API and Live Event Consumers') {
              def stages = [:]

              stages['Android'] = {
                timeout(time: 10) {
                  withEnv([
                    "DATABASE_NAME=pact_test1",
                    "PACT_API_CONSUMER=android",
                  ]) {
                    sh 'build/new-jenkins/pact/contracts-verify-api.sh'
                    sh 'build/new-jenkins/docker-copy-files.sh /usr/src/app/log/results.xml tmp/spec_results/${DATABASE_NAME} ${DATABASE_NAME} --allow-error --clean-dir'
                  }
                }
              }

              stages['Canvas iOS'] = {
                timeout(time: 10) {
                  withEnv([
                    "DATABASE_NAME=pact_test2",
                    "PACT_API_CONSUMER=canvas-ios",
                  ]) {
                    sh 'build/new-jenkins/pact/contracts-verify-api.sh'
                    sh 'build/new-jenkins/docker-copy-files.sh /usr/src/app/log/results.xml tmp/spec_results/${DATABASE_NAME} ${DATABASE_NAME} --allow-error --clean-dir'
                  }
                }
              }

              stages['Generic'] = {
                timeout(time: 10) {
                  withEnv([
                    "DATABASE_NAME=pact_test3",
                    "PACT_API_CONSUMER=Generic Consumer",
                  ]) {
                    sh 'build/new-jenkins/pact/contracts-verify-api.sh'
                    sh 'build/new-jenkins/docker-copy-files.sh /usr/src/app/log/results.xml tmp/spec_results/${DATABASE_NAME} ${DATABASE_NAME} --allow-error --clean-dir'
                  }
                }
              }

              stages['Quiz LTI'] = {
                timeout(time: 10) {
                  withEnv([
                    "DATABASE_NAME=pact_test4",
                    "PACT_API_CONSUMER=Quiz LTI",
                  ]) {
                    sh 'build/new-jenkins/pact/contracts-verify-api.sh'
                    sh 'build/new-jenkins/docker-copy-files.sh /usr/src/app/log/results.xml tmp/spec_results/${DATABASE_NAME} ${DATABASE_NAME} --allow-error --clean-dir'
                  }
                }
              }

              stages['Sistemic'] = {
                timeout(time: 10) {
                  withEnv([
                    "DATABASE_NAME=pact_test5",
                    "PACT_API_CONSUMER=Sistemic",
                  ]) {
                    sh 'build/new-jenkins/pact/contracts-verify-api.sh'
                    sh 'build/new-jenkins/docker-copy-files.sh /usr/src/app/log/results.xml tmp/spec_results/${DATABASE_NAME} ${DATABASE_NAME} --allow-error --clean-dir'
                  }
                }
              }

              stages['Live Events'] = {
                timeout(time: 5) {
                  sh 'build/new-jenkins/pact/contracts-verify-live-events.sh'
                  sh 'build/new-jenkins/docker-copy-files.sh /usr/src/app/log/results.xml tmp/spec_results/live_events live_events --allow-error --clean-dir'
                }
              }

              parallel(stages)
            }
          }
        }
      }
    }
  }
}
