#!/usr/bin/env groovy

/*
 * Copyright (C) 2019 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

pipeline {
  agent { label 'canvas-docker' }
  options {
    ansiColor('xterm')
  }

  environment {
    COMPOSE_FILE = 'docker-compose.new-jenkins.yml'
    // 'refs/changes/63/181863/8' -> '63.181863.8'
    NAME = "${env.GERRIT_REFSPEC}".minus('refs/changes/').replaceAll('/','.')
    PATCHSET_TAG = "$DOCKER_REGISTRY_FQDN/jenkins/canvas-lms:$NAME"
    PACT_BROKER = credentials('PACT_BROKER')
    
    MERGE_TAG = "$DOCKER_REGISTRY_FQDN/jenkins/canvas-lms:$GERRIT_BRANCH"
    CACHE_TAG = "canvas-lms:previous-image"
    POSTGRES_CACHE_TAG = "canvas-lms:previous-postgres-image"
    CASSANDRA_CACHE_TAG = "canvas-lms:previous-cassandra-image"
    DYNAMODB_CACHE_TAG = "canvas-lms:previous-dynamodb-image"
  }

  stages {
    stage ('Pre-Cleanup') {
      steps {
        timeout(time: 2) {
          sh 'build/new-jenkins/docker-cleanup.sh'
        }
      }
    }

    stage('Start Docker Images') {
      steps {
        timeout(time: 10) {
          script {
            def dbCommon = load 'build/new-jenkins/groovy/cache-migrations.groovy'
            dbCommon.createMigrateBuildUpCached()
          }
        }
      }
    }

    stage ('API Contract Tests') {
      steps {
        timeout(time: 10) {
          sh """
            docker-compose exec -T web env \
              PACT_BROKER_HOST=inst-pact-broker.inseng.net \
              PACT_BROKER_USERNAME="${env.PACT_BROKER_USR}" \
              PACT_BROKER_PASSWORD="${env.PACT_BROKER_PSW}" \
              JENKINS_URL="this silliness is necessary." \
              DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true \
              bin/contracts-verify-api
          """
        }
      }
    }

    stage("Live Events Contract Tests") {
      steps {
        sh """
          docker-compose exec -T web env \
            PACT_BROKER_HOST=inst-pact-broker.inseng.net \
            PACT_BROKER_USERNAME="${env.PACT_BROKER_USR}" \
            PACT_BROKER_PASSWORD="${env.PACT_BROKER_PSW}" \
            bin/contracts-verify-live-events
        """
      }
    }
  }

  post {
    failure {
      sh 'mkdir -p spec_results'
      sh 'docker cp $(docker-compose ps -q web):/usr/src/app/log/spec_failures/. ./spec_results/'
      script {
        dir('spec_results') {
          htmlFiles = findFiles glob: '**/index.html'
        }

        publishHTML(target: [
          allowMissing: false,
          alwaysLinkToLastBuild: false,
          keepAll: true,
          reportDir: "spec_results",
          reportFiles: htmlFiles.join(','),
          reportName: 'Test Results'
        ])
      }
    }
    cleanup {
      sh 'rm -rf spec_results/'
      sh 'build/new-jenkins/docker-cleanup.sh --allow-failure'
    }
  }
}
